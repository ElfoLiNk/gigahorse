{
  "types": [
    {
      "name": "Request",
      "namespace": "gigahorse",
      "type": "record",
      "target": "Scala",
      "fields": [
        {
          "name": "url",
          "type": "String",
          "doc": [
            "The base URL for this request"
          ]
        },
        {
          "name": "method",
          "type": "String",
          "doc": [
            "The method for this request."
          ],
          "default": "HttpVerbs.GET",
          "since": "0.1.0"
        },
        {
          "name": "body",
          "type": "Body",
          "doc": [
            "The body of this request"
          ],
          "default": "EmptyBody()",
          "since": "0.1.0"
        },
        {
          "name": "headers",
          "type": "Map[String, List[String]]",
          "doc": [
            "The headers for this request"
          ],
          "default": "Map()",
          "since": "0.1.0"
        },
        {
          "name": "queryString",
          "type": "Map[String, List[String]]",
          "doc": [
            "The query string for this request"
          ],
          "default": "Map()",
          "since": "0.1.0"
        },
        {
          "name": "signatureOpt",
          "type": "SignatureCalculator?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "authOpt",
          "type": "Realm?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "followRedirectsOpt",
          "type": "boolean?",
          "doc": [
            "Whether this request should follow redirects. (Default: `None`)"
          ],
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "requestTimeoutOpt",
          "type": "scala.concurrent.duration.Duration?",
          "doc": [
            "The timeout for the request. (Default: `None`)"
          ],
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "virtualHostOpt",
          "type": "String?",
          "doc": [
            "The virtual host this request will use. (Default: `None`)"
          ],
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "proxyServerOpt",
          "type": "ProxyServer?",
          "doc": [
            "The proxy server this request will use. (Default: `None`)"
          ],
          "default": "None",
          "since": "0.1.0"
        }
      ],
      "extra": [
        "import java.io.File",
        "import java.nio.charset.Charset",
        "",
        "/** Uses GET method. */",
        "def get: Request                                   = this.withMethod(HttpVerbs.GET)",
        "/** Uses PATCH method with the given body. */",
        "def patch[A: HttpWrite](body: A): Request          = this.withMethod(HttpVerbs.PATCH).withBody(body)",
        "/** Uses PATCH method with the given body. */",
        "def patch(body: String, charset: Charset): Request = this.withMethod(HttpVerbs.PATCH).withBody(EncodedString(body, charset))",
        "/** Uses PATCH method with the given file. */",
        "def patch(file: File): Request                     = this.withMethod(HttpVerbs.PATCH).withBody(FileBody(file))",
        "/** Uses POST method with the given body. */",
        "def post[A: HttpWrite](body: A): Request           = this.withMethod(HttpVerbs.POST).withBody(body)",
        "/** Uses POST method with the given body. */",
        "def post(body: String, charset: Charset): Request  = this.withMethod(HttpVerbs.POST).withBody(EncodedString(body, charset))",
        "/** Uses POST method with the given file. */",
        "def post(file: File): Request                      = this.withMethod(HttpVerbs.POST).withBody(FileBody(file))",
        "/** Uses PUT method with the given body. */",
        "def put[A: HttpWrite](body: A): Request            = this.withMethod(HttpVerbs.PUT).withBody(body)",
        "/** Uses PUT method with the given body. */",
        "def put(body: String, charset: Charset): Request   = this.withMethod(HttpVerbs.PUT).withBody(EncodedString(body, charset))",
        "/** Uses PUT method with the given file. */",
        "def put(file: File): Request                       = this.withMethod(HttpVerbs.PUT).withBody(FileBody(file))",
        "/** Uses DELETE method. */",
        "def delete: Request                                = this.withMethod(HttpVerbs.DELETE)",
        "/** Uses HEAD method. */",
        "def head: Request                                  = this.withMethod(HttpVerbs.HEAD)",
        "/** Uses OPTIONS method. */",
        "def options: Request                               = this.withMethod(HttpVerbs.OPTIONS)",
        "def withBody[A: HttpWrite](body: A): Request =",
        "  {",
        "    val w = implicitly[HttpWrite[A]]",
        "    val r = this.withBody(InMemoryBody(w.toByteArray(body)))",
        "    (w.contentType, r.contentType) match {",
        "      case (None, _)    => r",
        "      case (_, Some(_)) => r",
        "      case (Some(x), _) => r.withContentType(x)",
        "    }",
        "  }",
        "def contentType: Option[String] =",
        "  {",
        "    this.headers.find(p => p._1 == HeaderNames.CONTENT_TYPE) map { case (header, values) =>",
        "      values.head",
        "    }}",
        "def withContentType(ct: String): Request = this.addHeader(HeaderNames.CONTENT_TYPE -> ct)",
        "def withContentType(mt: String, charset: Charset): Request = this.withContentType(mt + \";charset=\" + charset.toString)",
        "def withAuth(auth: Realm): Request = copy(authOpt = Some(auth))",
        "def withAuth(username: String, password: String): Request = copy(authOpt = Some(Realm(username = username, password = password)))",
        "def withAuth(username: String, password: String, scheme: AuthScheme): Request = copy(authOpt = Some(Realm(username = username, password = password, scheme = scheme)))",
        "def withHeaders(headers0: (String, String)*): Request = copy(headers = Map(headers0 map { case (k, v) => k -> List(v) }: _*))",
        "def addHeader(headers0: (String, String)*): Request = this.addHeaders(headers0: _*)",
        "def addHeaders(headers0: (String, String)*): Request = copy(headers = this.headers ++ Map(headers0 map { case (k, v) => k -> List(v) }: _*))",
        "def addHeaders(headers0: Map[String, List[String]]): Request = copy(headers = this.headers ++ headers0)",
        "def withQueryString(parameters: (String, String)*): Request = copy(queryString = Map(parameters map { case (k, v) => k -> List(v) }: _*))",
        "def addQueryString(parameters: (String, String)*): Request = copy(queryString = this.queryString ++ Map(parameters map { case (k, v) => k -> List(v) }: _*))",
        "def withFollowRedirects(follow: Boolean): Request = copy(followRedirectsOpt = Some(follow))",
        "def withRequestTimeout(requestTimeout: scala.concurrent.duration.Duration): Request = copy(requestTimeoutOpt = Some(requestTimeout))",
        "def withVirtualHost(virtualHost: String): Request = copy(virtualHostOpt = Some(virtualHost))",
        "def withProxyServer(proxyServer: ProxyServer): Request = copy(proxyServerOpt = Some(proxyServer))"
      ]
    },
    {
      "name": "Body",
      "namespace": "gigahorse",
      "type": "interface",
      "target": "Scala",
      "types": [
        {
          "name": "InMemoryBody",
          "namespace": "gigahorse",
          "type": "record",
          "target": "Scala",
          "fields": [
            {
              "name": "bytes",
              "type": "Array[Byte]"
            }
          ]
        },
        {
          "name": "FileBody",
          "namespace": "gigahorse",
          "type": "record",
          "target": "Scala",
          "fields": [
            {
              "name": "file",
              "type": "java.io.File"
            }
          ]
        },
        {
          "name": "EmptyBody",
          "namespace": "gigahorse",
          "type": "record",
          "target": "Scala"
        }
      ]
    },
    {
      "name": "Realm",
      "namespace": "gigahorse",
      "type": "record",
      "target": "Scala",
      "fields": [
        {
          "name": "username",
          "type": "String",
          "doc": [
            "The user name."
          ]
        },
        {
          "name": "password",
          "type": "String",
          "doc": [
            "The password."
          ]
        },
        {
          "name": "scheme",
          "type": "AuthScheme",
          "doc": [
            "The scheme for this authentication."
          ],
          "default": "AuthScheme.Basic",
          "since": "0.0.1"
        },
        {
          "name": "usePreemptiveAuth",
          "type": "boolean",
          "doc": [
            "Whether preemptive authentication is enabled. (Default: true)"
          ],
          "default": "true",
          "since": "0.1.0"
        },
        {
          "name": "realmNameOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "nonceOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "algorithmOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "responseOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "opaqueOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "qopOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "ncOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "uriOpt",
          "type": "java.net.URI?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "methodNameOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "charsetOpt",
          "type": "java.nio.charset.Charset?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "ntlmDomainOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "ntlmHostOpt",
          "type": "String?",
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "useAbsoluteURI",
          "type": "boolean",
          "default": "false",
          "since": "0.1.0"
        },
        {
          "name": "omitQuery",
          "type": "boolean",
          "default": "false",
          "since": "0.1.0"
        }
      ],
      "extra": [
        "def withRealmName(realmName: String): Realm = copy(realmNameOpt = Some(realmName))",
        "def withNonce(nonce: String): Realm = copy(nonceOpt = Some(nonce))",
        "def withAlgorithm(algorithm: String): Realm = copy(algorithmOpt = Some(algorithm))",
        "def withResponse(response: String): Realm = copy(responseOpt = Some(response))",
        "def withOpaque(opaque: String): Realm = copy(opaqueOpt = Some(opaque))",
        "def withQop(qop: String): Realm = copy(qopOpt = Some(qop))",
        "def withNc(nc: String): Realm = copy(ncOpt = Some(nc))",
        "def withUri(uri: java.net.URI): Realm = copy(uriOpt = Some(uri))",
        "def withMethodName(methodName: String): Realm = copy(methodNameOpt = Some(methodName))",
        "def withCharset(charset: java.nio.charset.Charset): Realm = copy(charsetOpt = Some(charset))",
        "def withNtlmDomain(ntlmDomain: String): Realm = copy(ntlmDomainOpt = Some(ntlmDomain))",
        "def withNtlmHost(ntlmHost: String): Realm = copy(ntlmHostOpt = Some(ntlmHost))"
      ]
    },
    {
      "name": "AuthScheme",
      "namespace": "gigahorse",
      "type": "enum",
      "target": "Scala",
      "symbols": [
        "Basic", "Digest", "NTLM", "SPNEGO", "Kerberos"
      ]
    },
    {
      "name": "ProxyServer",
      "namespace": "gigahorse",
      "type": "interface",
      "target": "Scala",
      "fields": [
        {
          "name": "host",
          "type": "String",
          "doc": [
            "The hostname of the proxy server."
          ]
        },
        {
          "name": "port",
          "type": "int",
          "doc": [
            "The port of the proxy server."
          ]
        },
        {
          "name": "securedPort",
          "type": "int?",
          "doc": [
            "The secured port of the proxy server."
          ]
        },
        {
          "name": "authOpt",
          "type": "Realm?",
          "doc": [
            " The realm of the proxy server."
          ],
          "default": "None",
          "since": "0.1.0"
        },
        {
          "name": "nonProxyHosts",
          "type": "List[String]",
          "default": "List()",
          "since": "0.1.0"
        }
      ],
      "types": [
        {
          "name": "DefaultProxyServer",
          "namespace": "gigahorse",
          "type": "record",
          "target": "Scala",
          "extra": [
            "def withAuth(auth: Realm): DefaultProxyServer = copy(authOpt = Some(auth))",
            "def withAuth(username: String, password: String): DefaultProxyServer = copy(authOpt = Some(Realm(username = username, password = password)))",
            "def withAuth(username: String, password: String, scheme: AuthScheme): DefaultProxyServer = copy(authOpt = Some(Realm(username = username, password = password, scheme = scheme)))"
          ]
        }
      ]
    },
    {
      "name": "State",
      "namespace": "gigahorse",
      "type": "enum",
      "target": "Scala",
      "symbols": [
        "Continue", "Abort", "Upgrade"
      ]
    },
    {
      "name": "EncodedString",
      "namespace": "gigahorse",
      "type": "record",
      "target": "Scala",
      "fields": [
        {
          "name": "string",
          "type": "String"
        },
        {
          "name": "charset",
          "type": "java.nio.charset.Charset"
        }
      ]
    },
    {
      "name": "ConfigMemorySize",
      "namespace": "gigahorse",
      "type": "record",
      "target": "Scala",
      "fields": [
        {
          "name": "bytes",
          "type": "Long"
        }
      ]
    }
  ]
}
